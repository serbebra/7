// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DecentralizedExchange {
    address public admin;
    uint256 public feePercentage;
    mapping(address => mapping(address => uint256)) public reserves;
    mapping(address => bool) public tokens;
    mapping(address => bool) public marketMakers;

    event TokenAdded(address indexed token);
    event MarketMakerAdded(address indexed marketMaker);
    event Trade(address indexed from, address indexed to, address indexed token, uint256 amount, uint256 amountReceived);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    constructor(uint256 _feePercentage) {
        admin = msg.sender;
        feePercentage = _feePercentage;
    }

    function addToken(address _token) external onlyAdmin {
        require(!tokens[_token], "Token already added");
        tokens[_token] = true;
        emit TokenAdded(_token);
    }

    function addMarketMaker(address _marketMaker) external onlyAdmin {
        require(!marketMakers[_marketMaker], "Market maker already added");
        marketMakers[_marketMaker] = true;
        emit MarketMakerAdded(_marketMaker);
    }

    function setFeePercentage(uint256 _feePercentage) external onlyAdmin {
        require(_feePercentage <= 1000, "Fee percentage exceeds maximum");
        feePercentage = _feePercentage;
    }

    function trade(address _fromToken, address _toToken, uint256 _amount) external {
        require(tokens[_fromToken] && tokens[_toToken], "Invalid token");
        require(_amount > 0, "Amount must be greater than 0");

        uint256 fee = (_amount * feePercentage) / 10000;
        uint256 amountAfterFee = _amount - fee;

        if (marketMakers[msg.sender]) {
            reserves[_fromToken][_toToken] += amountAfterFee;
        } else {
            require(reserves[_fromToken][_toToken] >= amountAfterFee, "Insufficient liquidity");
            reserves[_fromToken][_toToken] -= amountAfterFee;
            emit Trade(msg.sender, address(this), _toToken, _amount, amountAfterFee);
        }
    }

    function emergencyWithdraw(uint256 _amount) external onlyAdmin {
        payable(admin).transfer(_amount);
    }
}
